// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CustomersBulkCreateParams struct {
	CustomerName       string      `json:"customer_name"`
	CustomerCode       string      `json:"customer_code"`
	CustomerImage      pgtype.Text `json:"customer_image"`
	CustomerEmail      string      `json:"customer_email"`
	CustomerPhone      pgtype.Text `json:"customer_phone"`
	CustomerPassword   string      `json:"customer_password"`
	CustomerNationalID pgtype.Text `json:"customer_national_id"`
}

const iconFindByName = `-- name: IconFindByName :one
SELECT
    icon_id
FROM
    icons
WHERE
    icon_name = $1
`

func (q *Queries) IconFindByName(ctx context.Context, iconName string) (int32, error) {
	row := q.db.QueryRow(ctx, iconFindByName, iconName)
	var icon_id int32
	err := row.Scan(&icon_id)
	return icon_id, err
}

const navigationBarCreate = `-- name: NavigationBarCreate :exec
INSERT INTO accounts_schema.navigation_bars(menu_key, label,label_ar ,icon_id, "route", parent_id, permission_id)
    VALUES ($1, $2, $3, $4,$5,(
            SELECT
                navigation_bar_id
            FROM
                accounts_schema.navigation_bars parent
            WHERE
                parent.menu_key = $6),
(
                SELECT
                    permission_id
                FROM
                    accounts_schema.permissions
                WHERE
                    permission_function = $7))
`

type NavigationBarCreateParams struct {
	MenuKey        string      `json:"menu_key"`
	Label          string      `json:"label"`
	LabelAr        pgtype.Text `json:"label_ar"`
	IconID         int32       `json:"icon_id"`
	Route          pgtype.Text `json:"route"`
	ParentKey      pgtype.Text `json:"parent_key"`
	PermissionName string      `json:"permission_name"`
}

func (q *Queries) NavigationBarCreate(ctx context.Context, arg NavigationBarCreateParams) error {
	_, err := q.db.Exec(ctx, navigationBarCreate,
		arg.MenuKey,
		arg.Label,
		arg.LabelAr,
		arg.IconID,
		arg.Route,
		arg.ParentKey,
		arg.PermissionName,
	)
	return err
}

const navigationBarsClear = `-- name: NavigationBarsClear :exec
TRUNCATE TABLE accounts_schema.navigation_bars CASCADE
`

func (q *Queries) NavigationBarsClear(ctx context.Context) error {
	_, err := q.db.Exec(ctx, navigationBarsClear)
	return err
}

type OwnersBulkCreateParams struct {
	OwnerName       string      `json:"owner_name"`
	OwnerImage      pgtype.Text `json:"owner_image"`
	OwnerEmail      string      `json:"owner_email"`
	OwnerPhone      pgtype.Text `json:"owner_phone"`
	OwnerPassword   string      `json:"owner_password"`
	OwnerNationalID string      `json:"owner_national_id"`
}

const permissionIdsByFunctions = `-- name: PermissionIdsByFunctions :many
SELECT
    permission_id
FROM
    accounts_schema.permissions
WHERE
    permission_function = ANY ($1::text[])
`

func (q *Queries) PermissionIdsByFunctions(ctx context.Context, dollar_1 []string) ([]int32, error) {
	rows, err := q.db.Query(ctx, permissionIdsByFunctions, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var permission_id int32
		if err := rows.Scan(&permission_id); err != nil {
			return nil, err
		}
		items = append(items, permission_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type PermissionsBulkCreateParams struct {
	PermissionName        string      `json:"permission_name"`
	PermissionFunction    string      `json:"permission_function"`
	PermissionDescription pgtype.Text `json:"permission_description"`
	PermissionGroup       string      `json:"permission_group"`
}

const permissionsClear = `-- name: PermissionsClear :exec
TRUNCATE TABLE accounts_schema."permissions" CASCADE
`

func (q *Queries) PermissionsClear(ctx context.Context) error {
	_, err := q.db.Exec(ctx, permissionsClear)
	return err
}

const roleIdsByNames = `-- name: RoleIdsByNames :many
SELECT
    role_id
FROM
    accounts_schema.roles
WHERE
    role_name = ANY ($1::text[])
`

func (q *Queries) RoleIdsByNames(ctx context.Context, dollar_1 []string) ([]int32, error) {
	rows, err := q.db.Query(ctx, roleIdsByNames, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var role_id int32
		if err := rows.Scan(&role_id); err != nil {
			return nil, err
		}
		items = append(items, role_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type RolePermissionsBulkCreateParams struct {
	RoleID       int32 `json:"role_id"`
	PermissionID int32 `json:"permission_id"`
}

type RolesBulkCreateParams struct {
	RoleName        string      `json:"role_name"`
	RoleDescription pgtype.Text `json:"role_description"`
}

const rolesClear = `-- name: RolesClear :exec
TRUNCATE TABLE accounts_schema.roles CASCADE
`

func (q *Queries) RolesClear(ctx context.Context) error {
	_, err := q.db.Exec(ctx, rolesClear)
	return err
}

const rolesCount = `-- name: RolesCount :one
SELECT
    COUNT(*)
FROM
    accounts_schema.roles
`

func (q *Queries) RolesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, rolesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

type UserPermissionsBulkCreateParams struct {
	UserID       int32 `json:"user_id"`
	PermissionID int32 `json:"permission_id"`
}

type UserRolesBulkCreateParams struct {
	UserID int32 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}

type UsersBulkCreateParams struct {
	UserName     string      `json:"user_name"`
	UserCode     string      `json:"user_code"`
	UserImage    pgtype.Text `json:"user_image"`
	UserEmail    string      `json:"user_email"`
	UserPhone    pgtype.Text `json:"user_phone"`
	UserPassword string      `json:"user_password"`
}

const usersClear = `-- name: UsersClear :exec
TRUNCATE TABLE accounts_schema.users CASCADE
`

func (q *Queries) UsersClear(ctx context.Context) error {
	_, err := q.db.Exec(ctx, usersClear)
	return err
}
