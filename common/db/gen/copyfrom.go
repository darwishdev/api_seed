// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCustomersBulkCreate implements pgx.CopyFromSource.
type iteratorForCustomersBulkCreate struct {
	rows                 []CustomersBulkCreateParams
	skippedFirstNextCall bool
}

func (r *iteratorForCustomersBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCustomersBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].CustomerName,
		r.rows[0].CustomerCode,
		r.rows[0].CustomerImage,
		r.rows[0].CustomerEmail,
		r.rows[0].CustomerPhone,
		r.rows[0].CustomerPassword,
		r.rows[0].CustomerNationalID,
	}, nil
}

func (r iteratorForCustomersBulkCreate) Err() error {
	return nil
}

func (q *Queries) CustomersBulkCreate(ctx context.Context, arg []CustomersBulkCreateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"accounts_schema", "customers"}, []string{"customer_name", "customer_code", "customer_image", "customer_email", "customer_phone", "customer_password", "customer_national_id"}, &iteratorForCustomersBulkCreate{rows: arg})
}

// iteratorForIconsBulkCreate implements pgx.CopyFromSource.
type iteratorForIconsBulkCreate struct {
	rows                 []IconsBulkCreateParams
	skippedFirstNextCall bool
}

func (r *iteratorForIconsBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForIconsBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].IconName,
		r.rows[0].IconContent,
	}, nil
}

func (r iteratorForIconsBulkCreate) Err() error {
	return nil
}

func (q *Queries) IconsBulkCreate(ctx context.Context, arg []IconsBulkCreateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"icons"}, []string{"icon_name", "icon_content"}, &iteratorForIconsBulkCreate{rows: arg})
}

// iteratorForOwnersBulkCreate implements pgx.CopyFromSource.
type iteratorForOwnersBulkCreate struct {
	rows                 []OwnersBulkCreateParams
	skippedFirstNextCall bool
}

func (r *iteratorForOwnersBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForOwnersBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].OwnerName,
		r.rows[0].OwnerImage,
		r.rows[0].OwnerEmail,
		r.rows[0].OwnerPhone,
		r.rows[0].OwnerPassword,
		r.rows[0].OwnerNationalID,
	}, nil
}

func (r iteratorForOwnersBulkCreate) Err() error {
	return nil
}

func (q *Queries) OwnersBulkCreate(ctx context.Context, arg []OwnersBulkCreateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"accounts_schema", "owners"}, []string{"owner_name", "owner_image", "owner_email", "owner_phone", "owner_password", "owner_national_id"}, &iteratorForOwnersBulkCreate{rows: arg})
}

// iteratorForPermissionsBulkCreate implements pgx.CopyFromSource.
type iteratorForPermissionsBulkCreate struct {
	rows                 []PermissionsBulkCreateParams
	skippedFirstNextCall bool
}

func (r *iteratorForPermissionsBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForPermissionsBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].PermissionName,
		r.rows[0].PermissionFunction,
		r.rows[0].PermissionDescription,
		r.rows[0].PermissionGroup,
	}, nil
}

func (r iteratorForPermissionsBulkCreate) Err() error {
	return nil
}

func (q *Queries) PermissionsBulkCreate(ctx context.Context, arg []PermissionsBulkCreateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"accounts_schema", "permissions"}, []string{"permission_name", "permission_function", "permission_description", "permission_group"}, &iteratorForPermissionsBulkCreate{rows: arg})
}

// iteratorForRolePermissionsBulkCreate implements pgx.CopyFromSource.
type iteratorForRolePermissionsBulkCreate struct {
	rows                 []RolePermissionsBulkCreateParams
	skippedFirstNextCall bool
}

func (r *iteratorForRolePermissionsBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForRolePermissionsBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RoleID,
		r.rows[0].PermissionID,
	}, nil
}

func (r iteratorForRolePermissionsBulkCreate) Err() error {
	return nil
}

func (q *Queries) RolePermissionsBulkCreate(ctx context.Context, arg []RolePermissionsBulkCreateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"accounts_schema", "role_permissions"}, []string{"role_id", "permission_id"}, &iteratorForRolePermissionsBulkCreate{rows: arg})
}

// iteratorForRolesBulkCreate implements pgx.CopyFromSource.
type iteratorForRolesBulkCreate struct {
	rows                 []RolesBulkCreateParams
	skippedFirstNextCall bool
}

func (r *iteratorForRolesBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForRolesBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RoleName,
		r.rows[0].RoleDescription,
	}, nil
}

func (r iteratorForRolesBulkCreate) Err() error {
	return nil
}

func (q *Queries) RolesBulkCreate(ctx context.Context, arg []RolesBulkCreateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"accounts_schema", "roles"}, []string{"role_name", "role_description"}, &iteratorForRolesBulkCreate{rows: arg})
}

// iteratorForSettingTypesBulkCreate implements pgx.CopyFromSource.
type iteratorForSettingTypesBulkCreate struct {
	rows                 []string
	skippedFirstNextCall bool
}

func (r *iteratorForSettingTypesBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSettingTypesBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0],
	}, nil
}

func (r iteratorForSettingTypesBulkCreate) Err() error {
	return nil
}

func (q *Queries) SettingTypesBulkCreate(ctx context.Context, settingType []string) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"setting_types"}, []string{"setting_type"}, &iteratorForSettingTypesBulkCreate{rows: settingType})
}

// iteratorForSettingsBulkCreate implements pgx.CopyFromSource.
type iteratorForSettingsBulkCreate struct {
	rows                 []SettingsBulkCreateParams
	skippedFirstNextCall bool
}

func (r *iteratorForSettingsBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSettingsBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SettingTypeID,
		r.rows[0].SettingKey,
		r.rows[0].SettingValue,
	}, nil
}

func (r iteratorForSettingsBulkCreate) Err() error {
	return nil
}

func (q *Queries) SettingsBulkCreate(ctx context.Context, arg []SettingsBulkCreateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"settings"}, []string{"setting_type_id", "setting_key", "setting_value"}, &iteratorForSettingsBulkCreate{rows: arg})
}

// iteratorForUserPermissionsBulkCreate implements pgx.CopyFromSource.
type iteratorForUserPermissionsBulkCreate struct {
	rows                 []UserPermissionsBulkCreateParams
	skippedFirstNextCall bool
}

func (r *iteratorForUserPermissionsBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForUserPermissionsBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].UserID,
		r.rows[0].PermissionID,
	}, nil
}

func (r iteratorForUserPermissionsBulkCreate) Err() error {
	return nil
}

func (q *Queries) UserPermissionsBulkCreate(ctx context.Context, arg []UserPermissionsBulkCreateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"accounts_schema", "user_permissions"}, []string{"user_id", "permission_id"}, &iteratorForUserPermissionsBulkCreate{rows: arg})
}

// iteratorForUserRolesBulkCreate implements pgx.CopyFromSource.
type iteratorForUserRolesBulkCreate struct {
	rows                 []UserRolesBulkCreateParams
	skippedFirstNextCall bool
}

func (r *iteratorForUserRolesBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForUserRolesBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].UserID,
		r.rows[0].RoleID,
	}, nil
}

func (r iteratorForUserRolesBulkCreate) Err() error {
	return nil
}

func (q *Queries) UserRolesBulkCreate(ctx context.Context, arg []UserRolesBulkCreateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"accounts_schema", "user_roles"}, []string{"user_id", "role_id"}, &iteratorForUserRolesBulkCreate{rows: arg})
}

// iteratorForUsersBulkCreate implements pgx.CopyFromSource.
type iteratorForUsersBulkCreate struct {
	rows                 []UsersBulkCreateParams
	skippedFirstNextCall bool
}

func (r *iteratorForUsersBulkCreate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForUsersBulkCreate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].UserName,
		r.rows[0].UserCode,
		r.rows[0].UserImage,
		r.rows[0].UserEmail,
		r.rows[0].UserPhone,
		r.rows[0].UserPassword,
	}, nil
}

func (r iteratorForUsersBulkCreate) Err() error {
	return nil
}

func (q *Queries) UsersBulkCreate(ctx context.Context, arg []UsersBulkCreateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"accounts_schema", "users"}, []string{"user_name", "user_code", "user_image", "user_email", "user_phone", "user_password"}, &iteratorForUsersBulkCreate{rows: arg})
}
